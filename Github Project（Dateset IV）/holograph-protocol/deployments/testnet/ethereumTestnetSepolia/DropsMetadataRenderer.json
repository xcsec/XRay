{
  "address": "0xc0d1c719a5FDc691e517298AF801B142ad80c9Ee",
  "abi": [
    {
      "inputs": [],
      "name": "Access_OnlyAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MetadataFrozen",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataBase",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataExtension",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contractURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "freezeAt",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "provenanceHash",
          "type": "bytes32"
        }
      ],
      "name": "ProvenanceHashUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "init",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "initializeWithData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "metadataBaseByContract",
      "outputs": [
        {
          "internalType": "string",
          "name": "base",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "extension",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contractURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "freezeAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "provenanceHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "baseUri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newContractUri",
          "type": "string"
        }
      ],
      "name": "updateMetadataBase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "metadataBase",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadataExtension",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newContractURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "freezeAt",
          "type": "uint256"
        }
      ],
      "name": "updateMetadataBaseWithDetails",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "provenanceHash",
          "type": "bytes32"
        }
      ],
      "name": "updateProvenanceHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9f5bbe48f0b9fe073478d026feebc049e4a8cc1d41b15ed52c0f77dec86fee9b",
  "receipt": {
    "to": "0x2694a14ea8D91F4CC314A3dBe8819eaadb7E025E",
    "from": "0xBB566182f35B9E5Ae04dB02a5450CC156d2f89c1",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1141283",
    "logsBloom": "0x
    "blockHash": "0xc2a9eed8fd8e2e388acb731debfd8d318df06636bb8337d7e675684619a46018",
    "transactionHash": "0x9f5bbe48f0b9fe073478d026feebc049e4a8cc1d41b15ed52c0f77dec86fee9b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5098944,
        "transactionHash": "0x9f5bbe48f0b9fe073478d026feebc049e4a8cc1d41b15ed52c0f77dec86fee9b",
        "address": "0x2694a14ea8D91F4CC314A3dBe8819eaadb7E025E",
        "topics": [
          "0x8ffcdc15a283d706d38281f500270d8b5a656918f555de0913d7455e3e6bc1bf"
        ],
        "data": "0x000000000000000000000000c0d1c719a5fdc691e517298af801b142ad80c9ee",
        "logIndex": 0,
        "blockHash": "0xc2a9eed8fd8e2e388acb731debfd8d318df06636bb8337d7e675684619a46018"
      }
    ],
    "blockNumber": 5098944,
    "cumulativeGasUsed": "1141283",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ea79ccfc09a2f4fc16ed37734e09289d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Access_OnlyAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MetadataFrozen\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataBase\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataExtension\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freezeAt\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"provenanceHash\",\"type\":\"bytes32\"}],\"name\":\"ProvenanceHashUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initializeWithData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"metadataBaseByContract\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"base\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"extension\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"freezeAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"provenanceHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newContractUri\",\"type\":\"string\"}],\"name\":\"updateMetadataBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataBase\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataExtension\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newContractURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"freezeAt\",\"type\":\"uint256\"}],\"name\":\"updateMetadataBaseWithDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"provenanceHash\",\"type\":\"bytes32\"}],\"name\":\"updateProvenanceHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"contractURI()\":{\"details\":\"reverts if a contract uri is not provided\",\"returns\":{\"_0\":\"contract uri for the contract metadata\"}},\"init(bytes)\":{\"details\":\"This function is called by the deployer/factory when creating a contractA blank init function is required to be able to call genesisDeriveFutureAddress to get the deterministic addressSince no data is required to be intialized the selector is just returned and _setInitialized() does not need to be called\"},\"initializeWithData(bytes)\":{\"params\":{\"data\":\"passed in for initialization\"}},\"tokenURI(uint256)\":{\"details\":\"reverts if a contract uri is not set\",\"returns\":{\"_0\":\"token URI for the given token ID and contract (set by msg.sender)\"}},\"updateMetadataBase(address,string,string)\":{\"params\":{\"baseUri\":\"new base URI\",\"newContractUri\":\"new contract URI (can be an empty string)\"}},\"updateMetadataBaseWithDetails(address,string,string,string,uint256)\":{\"params\":{\"freezeAt\":\"time to freeze the contract metadata at (set to 0 to disable)\",\"metadataBase\":\"new base URI to update metadata with\",\"metadataExtension\":\"new extension to append to base metadata URI\",\"target\":\"target contract to update metadata for\"}},\"updateProvenanceHash(address,bytes32)\":{\"params\":{\"provenanceHash\":\"provenance hash to set\",\"target\":\"target address to update\"}}},\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdated(address,string,string,string,uint256)\":{\"notice\":\"Event to mark updated metadata information\"},\"ProvenanceHashUpdated(address,bytes32)\":{\"notice\":\"Hash to mark updated provenance hash\"}},\"kind\":\"user\",\"methods\":{\"contractURI()\":{\"notice\":\"A contract URI for the given drop contract\"},\"init(bytes)\":{\"notice\":\"Used internally to initialize the contract instead of through a constructor\"},\"initializeWithData(bytes)\":{\"notice\":\"Standard init for drop metadata from root drop contract\"},\"metadataBaseByContract(address)\":{\"notice\":\"NFT metadata by contract\"},\"provenanceHashes(address)\":{\"notice\":\"Optional provenance hashes for NFT metadata by contract\"},\"tokenURI(uint256)\":{\"notice\":\"A token URI for the given drops contract\"},\"updateMetadataBase(address,string,string)\":{\"notice\":\"Update metadata base URI and contract URI\"},\"updateMetadataBaseWithDetails(address,string,string,string,uint256)\":{\"notice\":\"Update metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing details\"},\"updateProvenanceHash(address,bytes32)\":{\"notice\":\"Update the provenance hash (optional) for a given nft\"}},\"notice\":\"Drops metadata system\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/drops/metadata/DropsMetadataRenderer.sol\":\"DropsMetadataRenderer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc721a-upgradeable/=erc721a-upgradeable/\",\":forge-std/=lib/forge-std/src/\",\"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\"]},\"sources\":{\"contracts/abstract/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n/*\\n\\n                         \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n                         \\u2502 HOLOGRAPH \\u2502\\n                         \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n\\u2551                                                             \\u2551\\n\\u2551                            / ^ \\\\                            \\u2551\\n\\u2551                            ~~*~~            \\u00b8               \\u2551\\n\\u2551                         [ '<>:<>' ]         \\u2502\\u2591\\u2591\\u2591            \\u2551\\n\\u2551               \\u2554\\u2557           _/\\\"\\\\_           \\u2554\\u2563               \\u2551\\n\\u2551             \\u250c\\u2500\\u256c\\u256c\\u2500\\u2510          \\\"\\\"\\\"          \\u250c\\u2500\\u256c\\u256c\\u2500\\u2510             \\u2551\\n\\u2551          \\u250c\\u2500\\u252c\\u2518 \\u2560\\u2563 \\u2514\\u252c\\u2500\\u2510       \\\\_/       \\u250c\\u2500\\u252c\\u2518 \\u2560\\u2563 \\u2514\\u252c\\u2500\\u2510          \\u2551\\n\\u2551       \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2560\\u2563  \\u2502 \\u2514\\u252c\\u2500\\u2510           \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2560\\u2563  \\u2502 \\u2514\\u252c\\u2500\\u2510       \\u2551\\n\\u2551    \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502 \\u2514\\u252c\\u2500\\u2510     \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502 \\u2514\\u252c\\u2500\\u2510    \\u2551\\n\\u2551 \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502 \\u2514\\u252c\\u2510 \\u250c\\u252c\\u2518 \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502 \\u2514\\u252c\\u2500\\u2510 \\u2551\\n\\u2560\\u252c\\u2518 \\u2502  \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502  \\u2502\\u2514\\u00a4\\u2518\\u2502  \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502  \\u2502 \\u2514\\u252c\\u2563\\n\\u2551\\u2502  \\u2502  \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502  \\u2502   \\u2502  \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502  \\u2502  \\u2502\\u2551\\n\\u2560\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u256c\\u256c\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u256c\\u256c\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2563\\n\\u2560\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u256c\\u256c\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u256c\\u256c\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2563\\n\\u2551               \\u2560\\u2563                           \\u2560\\u2563               \\u2551\\n\\u2551               \\u2560\\u2563                           \\u2560\\u2563               \\u2551\\n\\u2551    ,          \\u2560\\u2563     ,        ,'      *    \\u2560\\u2563               \\u2551\\n\\u2551~~~~~^~~~~~~~~\\u250c\\u256c\\u256c\\u2510~~~^~~~~~~~~^^~~~~~~~~^~~\\u250c\\u256c\\u256c\\u2510~~~~~~~^~~~~~~\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2569\\u2569\\u2569\\u2569\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2569\\u2569\\u2569\\u2569\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n     - one protocol, one bridge = infinite possibilities -\\n\\n\\n ***************************************************************\\n\\n DISCLAIMER: U.S Patent Pending\\n\\n LICENSE: Holograph Limited Public License (H-LPL)\\n\\n https://holograph.xyz/licenses/h-lpl/1.0.0\\n\\n This license governs use of the accompanying software. If you\\n use the software, you accept this license. If you do not accept\\n the license, you are not permitted to use the software.\\n\\n 1. Definitions\\n\\n The terms \\\"reproduce,\\\" \\\"reproduction,\\\" \\\"derivative works,\\\" and\\n \\\"distribution\\\" have the same meaning here as under U.S.\\n copyright law. A \\\"contribution\\\" is the original software, or\\n any additions or changes to the software. A \\\"contributor\\\" is\\n any person that distributes its contribution under this\\n license. \\\"Licensed patents\\\" are a contributor\\u2019s patent claims\\n that read directly on its contribution.\\n\\n 2. Grant of Rights\\n\\n A) Copyright Grant- Subject to the terms of this license,\\n including the license conditions and limitations in sections 3\\n and 4, each contributor grants you a non-exclusive, worldwide,\\n royalty-free copyright license to reproduce its contribution,\\n prepare derivative works of its contribution, and distribute\\n its contribution or any derivative works that you create.\\n B) Patent Grant- Subject to the terms of this license,\\n including the license conditions and limitations in section 3,\\n each contributor grants you a non-exclusive, worldwide,\\n royalty-free license under its licensed patents to make, have\\n made, use, sell, offer for sale, import, and/or otherwise\\n dispose of its contribution in the software or derivative works\\n of the contribution in the software.\\n\\n 3. Conditions and Limitations\\n\\n A) No Trademark License- This license does not grant you rights\\n to use any contributors\\u2019 name, logo, or trademarks.\\n B) If you bring a patent claim against any contributor over\\n patents that you claim are infringed by the software, your\\n patent license from such contributor is terminated with\\n immediate effect.\\n C) If you distribute any portion of the software, you must\\n retain all copyright, patent, trademark, and attribution\\n notices that are present in the software.\\n D) If you distribute any portion of the software in source code\\n form, you may do so only under this license by including a\\n complete copy of this license with your distribution. If you\\n distribute any portion of the software in compiled or object\\n code form, you may only do so under a license that complies\\n with this license.\\n E) The software is licensed \\u201cas-is.\\u201d You bear all risks of\\n using it. The contributors give no express warranties,\\n guarantees, or conditions. You may have additional consumer\\n rights under your local laws which this license cannot change.\\n To the extent permitted under your local laws, the contributors\\n exclude all implied warranties, including those of\\n merchantability, fitness for a particular purpose and\\n non-infringement.\\n\\n 4. (F) Platform Limitation- The licenses granted in sections\\n 2.A & 2.B extend only to the software or derivative works that\\n you create that run on a Holograph system product.\\n\\n ***************************************************************\\n\\n*/\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interface/InitializableInterface.sol\\\";\\n\\n/**\\n * @title Initializable\\n * @author https://github.com/holographxyz\\n * @notice Use init instead of constructor\\n * @dev This allows for use of init function to make one time initializations without the need for a constructor\\n */\\nabstract contract Initializable is InitializableInterface {\\n  /**\\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.initialized')) - 1)\\n   */\\n  bytes32 constant _initializedSlot = 0x4e5f991bca30eca2d4643aaefa807e88f96a4a97398933d572a3c0d973004a01;\\n\\n  /**\\n   * @dev Constructor is left empty and init is used instead\\n   */\\n  constructor() {}\\n\\n  /**\\n   * @notice Used internally to initialize the contract instead of through a constructor\\n   * @dev This function is called by the deployer/factory when creating a contract\\n   * @param initPayload abi encoded payload to use for contract initilaization\\n   */\\n  function init(bytes memory initPayload) external virtual returns (bytes4);\\n\\n  function _isInitialized() internal view returns (bool initialized) {\\n    assembly {\\n      initialized := sload(_initializedSlot)\\n    }\\n  }\\n\\n  function _setInitialized() internal {\\n    assembly {\\n      sstore(_initializedSlot, 0x0000000000000000000000000000000000000000000000000000000000000001)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa55dc367285f96952dec56adfbfb48b6a4be31aef9ba0d30ad8c91023a572462\",\"license\":\"UNLICENSED\"},\"contracts/drops/interface/IHolographDropERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport {IMetadataRenderer} from \\\"./IMetadataRenderer.sol\\\";\\n\\nimport {AddressMintDetails} from \\\"../struct/AddressMintDetails.sol\\\";\\nimport {SaleDetails} from \\\"../struct/SaleDetails.sol\\\";\\n\\n/// @notice Interface for HOLOGRAPH Drops contract\\ninterface IHolographDropERC721 {\\n  // Access errors\\n\\n  /// @notice Only admin can access this function\\n  error Access_OnlyAdmin();\\n  /// @notice Missing the given role or admin access\\n  error Access_MissingRoleOrAdmin(bytes32 role);\\n  /// @notice Withdraw is not allowed by this user\\n  error Access_WithdrawNotAllowed();\\n  /// @notice Cannot withdraw funds due to ETH send failure.\\n  error Withdraw_FundsSendFailure();\\n  /// @notice Mint fee send failure\\n  error MintFee_FundsSendFailure();\\n\\n  /// @notice Call to external metadata renderer failed.\\n  error ExternalMetadataRenderer_CallFailed();\\n\\n  /// @notice Thrown when the operator for the contract is not allowed\\n  /// @dev Used when strict enforcement of marketplaces for creator royalties is desired.\\n  error OperatorNotAllowed(address operator);\\n\\n  /// @notice Thrown when there is no active market filter DAO address supported for the current chain\\n  /// @dev Used for enabling and disabling filter for the given chain.\\n  error MarketFilterDAOAddressNotSupportedForChain();\\n\\n  /// @notice Used when the operator filter registry external call fails\\n  /// @dev Used for bubbling error up to clients.\\n  error RemoteOperatorFilterRegistryCallFailed();\\n\\n  // Sale/Purchase errors\\n  /// @notice Sale is inactive\\n  error Sale_Inactive();\\n  /// @notice Presale is inactive\\n  error Presale_Inactive();\\n  /// @notice Presale merkle root is invalid\\n  error Presale_MerkleNotApproved();\\n  /// @notice Wrong price for purchase\\n  error Purchase_WrongPrice(uint256 correctPrice);\\n  /// @notice NFT sold out\\n  error Mint_SoldOut();\\n  /// @notice Too many purchase for address\\n  error Purchase_TooManyForAddress();\\n  /// @notice Too many presale for address\\n  error Presale_TooManyForAddress();\\n  /// @notice Fee payout failed\\n  error FeePaymentFailed();\\n\\n  // Admin errors\\n  /// @notice Royalty percentage too high\\n  error Setup_RoyaltyPercentageTooHigh(uint16 maxRoyaltyBPS);\\n  /// @notice Invalid admin upgrade address\\n  error Admin_InvalidUpgradeAddress(address proposedAddress);\\n  /// @notice Unable to finalize an edition not marked as open (size set to uint64_max_value)\\n  error Admin_UnableToFinalizeNotOpenEdition();\\n\\n  /// @notice Event emitted for mint fee payout\\n  /// @param mintFeeAmount amount of the mint fee\\n  /// @param mintFeeRecipient recipient of the mint fee\\n  /// @param success if the payout succeeded\\n  event MintFeePayout(uint256 mintFeeAmount, address mintFeeRecipient, bool success);\\n\\n  /// @notice Event emitted for each sale\\n  /// @param to address sale was made to\\n  /// @param quantity quantity of the minted nfts\\n  /// @param pricePerToken price for each token\\n  /// @param firstPurchasedTokenId first purchased token ID (to get range add to quantity for max)\\n  event Sale(\\n    address indexed to,\\n    uint256 indexed quantity,\\n    uint256 indexed pricePerToken,\\n    uint256 firstPurchasedTokenId\\n  );\\n\\n  /// @notice Sales configuration has been changed\\n  /// @dev To access new sales configuration, use getter function.\\n  /// @param changedBy Changed by user\\n  event SalesConfigChanged(address indexed changedBy);\\n\\n  /// @notice Event emitted when the funds recipient is changed\\n  /// @param newAddress new address for the funds recipient\\n  /// @param changedBy address that the recipient is changed by\\n  event FundsRecipientChanged(address indexed newAddress, address indexed changedBy);\\n\\n  /// @notice Event emitted when the funds are withdrawn from the minting contract\\n  /// @param withdrawnBy address that issued the withdraw\\n  /// @param withdrawnTo address that the funds were withdrawn to\\n  /// @param amount amount that was withdrawn\\n  event FundsWithdrawn(address indexed withdrawnBy, address indexed withdrawnTo, uint256 amount);\\n\\n  /// @notice Event emitted when an open mint is finalized and further minting is closed forever on the contract.\\n  /// @param sender address sending close mint\\n  /// @param numberOfMints number of mints the contract is finalized at\\n  event OpenMintFinalized(address indexed sender, uint256 numberOfMints);\\n\\n  /// @notice Event emitted when metadata renderer is updated.\\n  /// @param sender address of the updater\\n  /// @param renderer new metadata renderer address\\n  event UpdatedMetadataRenderer(address sender, IMetadataRenderer renderer);\\n\\n  /// @notice Admin function to update the sales configuration settings\\n  /// @param publicSalePrice public sale price in ether\\n  /// @param maxSalePurchasePerAddress Max # of purchases (public) per address allowed\\n  /// @param publicSaleStart unix timestamp when the public sale starts\\n  /// @param publicSaleEnd unix timestamp when the public sale ends (set to 0 to disable)\\n  /// @param presaleStart unix timestamp when the presale starts\\n  /// @param presaleEnd unix timestamp when the presale ends\\n  /// @param presaleMerkleRoot merkle root for the presale information\\n  function setSaleConfiguration(\\n    uint104 publicSalePrice,\\n    uint32 maxSalePurchasePerAddress,\\n    uint64 publicSaleStart,\\n    uint64 publicSaleEnd,\\n    uint64 presaleStart,\\n    uint64 presaleEnd,\\n    bytes32 presaleMerkleRoot\\n  ) external;\\n\\n  /// @notice External purchase function (payable in eth)\\n  /// @param quantity to purchase\\n  /// @return first minted token ID\\n  function purchase(uint256 quantity) external payable returns (uint256);\\n\\n  /// @notice External purchase presale function (takes a merkle proof and matches to root) (payable in eth)\\n  /// @param quantity to purchase\\n  /// @param maxQuantity can purchase (verified by merkle root)\\n  /// @param pricePerToken price per token allowed (verified by merkle root)\\n  /// @param merkleProof input for merkle proof leaf verified by merkle root\\n  /// @return first minted token ID\\n  function purchasePresale(\\n    uint256 quantity,\\n    uint256 maxQuantity,\\n    uint256 pricePerToken,\\n    bytes32[] memory merkleProof\\n  ) external payable returns (uint256);\\n\\n  /// @notice Function to return the global sales details for the given drop\\n  function saleDetails() external view returns (SaleDetails memory);\\n\\n  /// @notice Function to return the specific sales details for a given address\\n  /// @param minter address for minter to return mint information for\\n  function mintedPerAddress(address minter) external view returns (AddressMintDetails memory);\\n\\n  /// @notice This is the opensea/public owner setting that can be set by the contract admin\\n  function owner() external view returns (address);\\n\\n  /// @notice Update the metadata renderer\\n  /// @param newRenderer new address for renderer\\n  /// @param setupRenderer data to call to bootstrap data for the new renderer (optional)\\n  function setMetadataRenderer(IMetadataRenderer newRenderer, bytes memory setupRenderer) external;\\n\\n  /// @notice This is an admin mint function to mint a quantity to a specific address\\n  /// @param to address to mint to\\n  /// @param quantity quantity to mint\\n  /// @return the id of the first minted NFT\\n  function adminMint(address to, uint256 quantity) external returns (uint256);\\n\\n  /// @notice This is an admin mint function to mint a single nft each to a list of addresses\\n  /// @param to list of addresses to mint an NFT each to\\n  /// @return the id of the first minted NFT\\n  function adminMintAirdrop(address[] memory to) external returns (uint256);\\n\\n  /// @dev Getter for admin role associated with the contract to handle metadata\\n  /// @return boolean if address is admin\\n  function isAdmin(address user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfa22387e21747491294858586996405f6f7fe33230b197d59890dba7854f5587\",\"license\":\"MIT\"},\"contracts/drops/interface/IMetadataRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IMetadataRenderer {\\n  function tokenURI(uint256) external view returns (string memory);\\n\\n  function contractURI() external view returns (string memory);\\n\\n  function initializeWithData(bytes memory initData) external;\\n}\\n\",\"keccak256\":\"0x3b697c97e009e92ce17a429d29876f2e1bfe191aade6341265744ec3d7474186\",\"license\":\"MIT\"},\"contracts/drops/library/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nlibrary Strings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n}\\n\",\"keccak256\":\"0x797c7fcb3b64e00a7cb97aed064b3e09741e90ddd8af13d11368906416ea2196\",\"license\":\"MIT\"},\"contracts/drops/metadata/DropsMetadataRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport {Initializable} from \\\"../../abstract/Initializable.sol\\\";\\n\\nimport {IMetadataRenderer} from \\\"../interface/IMetadataRenderer.sol\\\";\\n\\nimport {Strings} from \\\"../library/Strings.sol\\\";\\n\\nimport {MetadataRenderAdminCheck} from \\\"./MetadataRenderAdminCheck.sol\\\";\\n\\n/// @notice Drops metadata system\\ncontract DropsMetadataRenderer is Initializable, IMetadataRenderer, MetadataRenderAdminCheck {\\n  error MetadataFrozen();\\n\\n  /// Event to mark updated metadata information\\n  event MetadataUpdated(\\n    address indexed target,\\n    string metadataBase,\\n    string metadataExtension,\\n    string contractURI,\\n    uint256 freezeAt\\n  );\\n\\n  /// @notice Hash to mark updated provenance hash\\n  event ProvenanceHashUpdated(address indexed target, bytes32 provenanceHash);\\n\\n  /// @notice Struct to store metadata info and update data\\n  struct MetadataURIInfo {\\n    string base;\\n    string extension;\\n    string contractURI;\\n    uint256 freezeAt;\\n  }\\n\\n  /// @notice NFT metadata by contract\\n  mapping(address => MetadataURIInfo) public metadataBaseByContract;\\n\\n  /// @notice Optional provenance hashes for NFT metadata by contract\\n  mapping(address => bytes32) public provenanceHashes;\\n\\n  /**\\n   * @notice Used internally to initialize the contract instead of through a constructor\\n   * @dev This function is called by the deployer/factory when creating a contract\\n   * @dev A blank init function is required to be able to call genesisDeriveFutureAddress to get the deterministic address\\n   * @dev Since no data is required to be intialized the selector is just returned and _setInitialized() does not need to be called\\n   */\\n  function init(bytes memory /* initPayload */) external pure override returns (bytes4) {\\n    return Initializable.init.selector;\\n  }\\n\\n  /// @notice Standard init for drop metadata from root drop contract\\n  /// @param data passed in for initialization\\n  function initializeWithData(bytes memory data) external {\\n    // data format: string baseURI, string newContractURI\\n    (string memory initialBaseURI, string memory initialContractURI) = abi.decode(data, (string, string));\\n    _updateMetadataDetails(msg.sender, initialBaseURI, \\\"\\\", initialContractURI, 0);\\n  }\\n\\n  /// @notice Update the provenance hash (optional) for a given nft\\n  /// @param target target address to update\\n  /// @param provenanceHash provenance hash to set\\n  function updateProvenanceHash(address target, bytes32 provenanceHash) external requireSenderAdmin(target) {\\n    provenanceHashes[target] = provenanceHash;\\n    emit ProvenanceHashUpdated(target, provenanceHash);\\n  }\\n\\n  /// @notice Update metadata base URI and contract URI\\n  /// @param baseUri new base URI\\n  /// @param newContractUri new contract URI (can be an empty string)\\n  function updateMetadataBase(\\n    address target,\\n    string memory baseUri,\\n    string memory newContractUri\\n  ) external requireSenderAdmin(target) {\\n    _updateMetadataDetails(target, baseUri, \\\"\\\", newContractUri, 0);\\n  }\\n\\n  /// @notice Update metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing details\\n  /// @param target target contract to update metadata for\\n  /// @param metadataBase new base URI to update metadata with\\n  /// @param metadataExtension new extension to append to base metadata URI\\n  /// @param freezeAt time to freeze the contract metadata at (set to 0 to disable)\\n  function updateMetadataBaseWithDetails(\\n    address target,\\n    string memory metadataBase,\\n    string memory metadataExtension,\\n    string memory newContractURI,\\n    uint256 freezeAt\\n  ) external requireSenderAdmin(target) {\\n    _updateMetadataDetails(target, metadataBase, metadataExtension, newContractURI, freezeAt);\\n  }\\n\\n  /// @notice Internal metadata update function\\n  /// @param metadataBase Base URI to update metadata for\\n  /// @param metadataExtension Extension URI to update metadata for\\n  /// @param freezeAt timestamp to freeze metadata (set to 0 to disable freezing)\\n  function _updateMetadataDetails(\\n    address target,\\n    string memory metadataBase,\\n    string memory metadataExtension,\\n    string memory newContractURI,\\n    uint256 freezeAt\\n  ) internal {\\n    if (freezeAt != 0 && freezeAt > block.timestamp) {\\n      revert MetadataFrozen();\\n    }\\n\\n    metadataBaseByContract[target] = MetadataURIInfo({\\n      base: metadataBase,\\n      extension: metadataExtension,\\n      contractURI: newContractURI,\\n      freezeAt: freezeAt\\n    });\\n    emit MetadataUpdated({\\n      target: target,\\n      metadataBase: metadataBase,\\n      metadataExtension: metadataExtension,\\n      contractURI: newContractURI,\\n      freezeAt: freezeAt\\n    });\\n  }\\n\\n  /// @notice A contract URI for the given drop contract\\n  /// @dev reverts if a contract uri is not provided\\n  /// @return contract uri for the contract metadata\\n  function contractURI() external view override returns (string memory) {\\n    string memory uri = metadataBaseByContract[msg.sender].contractURI;\\n    if (bytes(uri).length == 0) revert();\\n    return uri;\\n  }\\n\\n  /// @notice A token URI for the given drops contract\\n  /// @dev reverts if a contract uri is not set\\n  /// @return token URI for the given token ID and contract (set by msg.sender)\\n  function tokenURI(uint256 tokenId) external view override returns (string memory) {\\n    MetadataURIInfo memory info = metadataBaseByContract[msg.sender];\\n\\n    if (bytes(info.base).length == 0) revert();\\n\\n    return string(abi.encodePacked(info.base, Strings.toString(tokenId), info.extension));\\n  }\\n}\\n\",\"keccak256\":\"0x08d795ea0d0de98750142757c44c05dadda98a74c0bc02e770d602309f404d65\",\"license\":\"MIT\"},\"contracts/drops/metadata/MetadataRenderAdminCheck.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport {IHolographDropERC721} from \\\"../interface/IHolographDropERC721.sol\\\";\\n\\ncontract MetadataRenderAdminCheck {\\n  error Access_OnlyAdmin();\\n\\n  /// @notice Modifier to require the sender to be an admin\\n  /// @param target address that the user wants to modify\\n  modifier requireSenderAdmin(address target) {\\n    if (target != msg.sender && !IHolographDropERC721(target).isAdmin(msg.sender)) {\\n      revert Access_OnlyAdmin();\\n    }\\n\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x727123f3372b4c5ecc6e133e74b608620e21a99adc9df145893deb95955f552c\",\"license\":\"MIT\"},\"contracts/drops/struct/AddressMintDetails.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\n/// @notice Return type of specific mint counts and details per address\\nstruct AddressMintDetails {\\n  /// Number of total mints from the given address\\n  uint256 totalMints;\\n  /// Number of presale mints from the given address\\n  uint256 presaleMints;\\n  /// Number of public mints from the given address\\n  uint256 publicMints;\\n}\\n\",\"keccak256\":\"0xb89be69f1678c6c14fd2e1372654478a3f27fcfbe66b22e40a4397122f6ac39c\",\"license\":\"MIT\"},\"contracts/drops/struct/SaleDetails.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\n/// @notice Return value for sales details to use with front-ends\\nstruct SaleDetails {\\n  // Synthesized status variables for sale and presale\\n  bool publicSaleActive;\\n  bool presaleActive;\\n  // Price for public sale\\n  uint256 publicSalePrice;\\n  // Timed sale actions for public sale\\n  uint64 publicSaleStart;\\n  uint64 publicSaleEnd;\\n  // Timed sale actions for presale\\n  uint64 presaleStart;\\n  uint64 presaleEnd;\\n  // Merkle root (includes address, quantity, and price data for each entry)\\n  bytes32 presaleMerkleRoot;\\n  // Limit public sale to a specific number of mints per wallet\\n  uint256 maxSalePurchasePerAddress;\\n  // Information about the rest of the supply\\n  // Total that have been minted\\n  uint256 totalMinted;\\n  // The total supply available\\n  uint256 maxSupply;\\n}\\n\",\"keccak256\":\"0xa62e455ec13ea28d75b7d735199f278ef1415b2eb18db527b701758e6ec12aab\",\"license\":\"MIT\"},\"contracts/interface/InitializableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n/*\\n\\n                         \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n                         \\u2502 HOLOGRAPH \\u2502\\n                         \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n\\u2551                                                             \\u2551\\n\\u2551                            / ^ \\\\                            \\u2551\\n\\u2551                            ~~*~~            \\u00b8               \\u2551\\n\\u2551                         [ '<>:<>' ]         \\u2502\\u2591\\u2591\\u2591            \\u2551\\n\\u2551               \\u2554\\u2557           _/\\\"\\\\_           \\u2554\\u2563               \\u2551\\n\\u2551             \\u250c\\u2500\\u256c\\u256c\\u2500\\u2510          \\\"\\\"\\\"          \\u250c\\u2500\\u256c\\u256c\\u2500\\u2510             \\u2551\\n\\u2551          \\u250c\\u2500\\u252c\\u2518 \\u2560\\u2563 \\u2514\\u252c\\u2500\\u2510       \\\\_/       \\u250c\\u2500\\u252c\\u2518 \\u2560\\u2563 \\u2514\\u252c\\u2500\\u2510          \\u2551\\n\\u2551       \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2560\\u2563  \\u2502 \\u2514\\u252c\\u2500\\u2510           \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2560\\u2563  \\u2502 \\u2514\\u252c\\u2500\\u2510       \\u2551\\n\\u2551    \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502 \\u2514\\u252c\\u2500\\u2510     \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502 \\u2514\\u252c\\u2500\\u2510    \\u2551\\n\\u2551 \\u250c\\u2500\\u252c\\u2518 \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502 \\u2514\\u252c\\u2510 \\u250c\\u252c\\u2518 \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502 \\u2514\\u252c\\u2500\\u2510 \\u2551\\n\\u2560\\u252c\\u2518 \\u2502  \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502  \\u2502\\u2514\\u00a4\\u2518\\u2502  \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502  \\u2502 \\u2514\\u252c\\u2563\\n\\u2551\\u2502  \\u2502  \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502  \\u2502   \\u2502  \\u2502  \\u2502  \\u2502  \\u2560\\u2563  \\u2502  \\u2502  \\u2502  \\u2502  \\u2502\\u2551\\n\\u2560\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u256c\\u256c\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u256c\\u256c\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2550\\u2550\\u2569\\u2563\\n\\u2560\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u256c\\u256c\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u256c\\u256c\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2534\\u2563\\n\\u2551               \\u2560\\u2563                           \\u2560\\u2563               \\u2551\\n\\u2551               \\u2560\\u2563                           \\u2560\\u2563               \\u2551\\n\\u2551    ,          \\u2560\\u2563     ,        ,'      *    \\u2560\\u2563               \\u2551\\n\\u2551~~~~~^~~~~~~~~\\u250c\\u256c\\u256c\\u2510~~~^~~~~~~~~^^~~~~~~~~^~~\\u250c\\u256c\\u256c\\u2510~~~~~~~^~~~~~~\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2569\\u2569\\u2569\\u2569\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2569\\u2569\\u2569\\u2569\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n     - one protocol, one bridge = infinite possibilities -\\n\\n\\n ***************************************************************\\n\\n DISCLAIMER: U.S Patent Pending\\n\\n LICENSE: Holograph Limited Public License (H-LPL)\\n\\n https://holograph.xyz/licenses/h-lpl/1.0.0\\n\\n This license governs use of the accompanying software. If you\\n use the software, you accept this license. If you do not accept\\n the license, you are not permitted to use the software.\\n\\n 1. Definitions\\n\\n The terms \\\"reproduce,\\\" \\\"reproduction,\\\" \\\"derivative works,\\\" and\\n \\\"distribution\\\" have the same meaning here as under U.S.\\n copyright law. A \\\"contribution\\\" is the original software, or\\n any additions or changes to the software. A \\\"contributor\\\" is\\n any person that distributes its contribution under this\\n license. \\\"Licensed patents\\\" are a contributor\\u2019s patent claims\\n that read directly on its contribution.\\n\\n 2. Grant of Rights\\n\\n A) Copyright Grant- Subject to the terms of this license,\\n including the license conditions and limitations in sections 3\\n and 4, each contributor grants you a non-exclusive, worldwide,\\n royalty-free copyright license to reproduce its contribution,\\n prepare derivative works of its contribution, and distribute\\n its contribution or any derivative works that you create.\\n B) Patent Grant- Subject to the terms of this license,\\n including the license conditions and limitations in section 3,\\n each contributor grants you a non-exclusive, worldwide,\\n royalty-free license under its licensed patents to make, have\\n made, use, sell, offer for sale, import, and/or otherwise\\n dispose of its contribution in the software or derivative works\\n of the contribution in the software.\\n\\n 3. Conditions and Limitations\\n\\n A) No Trademark License- This license does not grant you rights\\n to use any contributors\\u2019 name, logo, or trademarks.\\n B) If you bring a patent claim against any contributor over\\n patents that you claim are infringed by the software, your\\n patent license from such contributor is terminated with\\n immediate effect.\\n C) If you distribute any portion of the software, you must\\n retain all copyright, patent, trademark, and attribution\\n notices that are present in the software.\\n D) If you distribute any portion of the software in source code\\n form, you may do so only under this license by including a\\n complete copy of this license with your distribution. If you\\n distribute any portion of the software in compiled or object\\n code form, you may only do so under a license that complies\\n with this license.\\n E) The software is licensed \\u201cas-is.\\u201d You bear all risks of\\n using it. The contributors give no express warranties,\\n guarantees, or conditions. You may have additional consumer\\n rights under your local laws which this license cannot change.\\n To the extent permitted under your local laws, the contributors\\n exclude all implied warranties, including those of\\n merchantability, fitness for a particular purpose and\\n non-infringement.\\n\\n 4. (F) Platform Limitation- The licenses granted in sections\\n 2.A & 2.B extend only to the software or derivative works that\\n you create that run on a Holograph system product.\\n\\n ***************************************************************\\n\\n*/\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @title Initializable\\n * @author https://github.com/holographxyz\\n * @notice Use init instead of constructor\\n * @dev This allows for use of init function to make one time initializations without the need of a constructor\\n */\\ninterface InitializableInterface {\\n  /**\\n   * @notice Used internally to initialize the contract instead of through a constructor\\n   * @dev This function is called by the deployer/factory when creating a contract\\n   * @param initPayload abi encoded payload to use for contract initilaization\\n   */\\n  function init(bytes memory initPayload) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x0a76fae986c5c18110ce2b1818c84ec28b7bf7f8fb00d20b39b8d7225fbd892d\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611387806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063af806d5611610076578063cc1306db1161005b578063cc1306db1461018f578063de5af49b146101a2578063e8a3d485146101d057600080fd5b8063af806d561461015c578063c87b56dd1461016f57600080fd5b806342495a95146100a85780634ddf47d4146100bd578063856a7ffa1461012657806391074f9814610139575b600080fd5b6100bb6100b6366004610e6d565b6101d8565b005b6100f06100cb366004610f0e565b507f4ddf47d40000000000000000000000000000000000000000000000000000000090565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b6100bb610134366004610f0e565b6102d6565b61014c610147366004610f57565b610313565b60405161011d9493929190610fe8565b6100bb61016a366004611033565b6104d3565b61018261017d3660046110a7565b6105df565b60405161011d91906110c0565b6100bb61019d3660046110d3565b610808565b6101c26101b0366004610f57565b60016020526000908152604090205481565b60405190815260200161011d565b610182610958565b8473ffffffffffffffffffffffffffffffffffffffff8116331480159061028a57506040517f24d7806c00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8216906324d7806c90602401602060405180830381865afa158015610264573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028891906110fd565b155b156102c1576040517f02bd6bd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102ce8686868686610a0d565b505050505050565b600080828060200190518101906102ed9190611164565b9150915061030e338360405180602001604052806000815250846000610a0d565b505050565b60006020819052908152604090208054819061032e906111c8565b80601f016020809104026020016040519081016040528092919081815260200182805461035a906111c8565b80156103a75780601f1061037c576101008083540402835291602001916103a7565b820191906000526020600020905b81548152906001019060200180831161038a57829003601f168201915b5050505050908060010180546103bc906111c8565b80601f01602080910402602001604051908101604052809291908181526020018280546103e8906111c8565b80156104355780601f1061040a57610100808354040283529160200191610435565b820191906000526020600020905b81548152906001019060200180831161041857829003601f168201915b50505050509080600201805461044a906111c8565b80601f0160208091040260200160405190810160405280929190818152602001828054610476906111c8565b80156104c35780601f10610498576101008083540402835291602001916104c3565b820191906000526020600020905b8154815290600101906020018083116104a657829003601f168201915b5050505050908060030154905084565b8273ffffffffffffffffffffffffffffffffffffffff8116331480159061058557506040517f24d7806c00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8216906324d7806c90602401602060405180830381865afa15801561055f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058391906110fd565b155b156105bc576040517f02bd6bd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105d9848460405180602001604052806000815250856000610a0d565b50505050565b3360009081526020819052604080822081516080810190925280546060939291908290829061060d906111c8565b80601f0160208091040260200160405190810160405280929190818152602001828054610639906111c8565b80156106865780601f1061065b57610100808354040283529160200191610686565b820191906000526020600020905b81548152906001019060200180831161066957829003601f168201915b5050505050815260200160018201805461069f906111c8565b80601f01602080910402602001604051908101604052809291908181526020018280546106cb906111c8565b80156107185780601f106106ed57610100808354040283529160200191610718565b820191906000526020600020905b8154815290600101906020018083116106fb57829003601f168201915b50505050508152602001600282018054610731906111c8565b80601f016020809104026020016040519081016040528092919081815260200182805461075d906111c8565b80156107aa5780601f1061077f576101008083540402835291602001916107aa565b820191906000526020600020905b81548152906001019060200180831161078d57829003601f168201915b5050505050815260200160038201548152505090508060000151516000036107d157600080fd5b80516107dc84610b4a565b6020808401516040516107f19493920161121b565b604051602081830303815290604052915050919050565b8173ffffffffffffffffffffffffffffffffffffffff811633148015906108ba57506040517f24d7806c00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8216906324d7806c90602401602060405180830381865afa158015610894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b891906110fd565b155b156108f1576040517f02bd6bd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660008181526001602052604090819020849055517ff2e078c4022bfd6c56addd06540a4a5dd4252b6b2c424b6840c184063f48fc279061094b9085815260200190565b60405180910390a2505050565b3360009081526020819052604081206002018054606092919061097a906111c8565b80601f01602080910402602001604051908101604052809291908181526020018280546109a6906111c8565b80156109f35780601f106109c8576101008083540402835291602001916109f3565b820191906000526020600020905b8154815290600101906020018083116109d657829003601f168201915b505050505090508051600003610a0857600080fd5b919050565b8015801590610a1b57504281115b15610a52576040517feef043fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160808101825285815260208082018690528183018590526060820184905273ffffffffffffffffffffffffffffffffffffffff88166000908152808252929092208151805192939192610aac9284920190610c87565b506020828101518051610ac59260018501920190610c87565b5060408201518051610ae1916002840191602090910190610c87565b50606082015181600301559050508473ffffffffffffffffffffffffffffffffffffffff167f5eff125d5659803f33dbda215d6e8bfe0a404fd213a9ecb5e61973ee16cb17e785858585604051610b3b9493929190610fe8565b60405180910390a25050505050565b606081600003610b8d57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610bb75780610ba18161128d565b9150610bb09050600a836112f4565b9150610b91565b60008167ffffffffffffffff811115610bd257610bd2610d44565b6040519080825280601f01601f191660200182016040528015610bfc576020820181803683370190505b5090505b8415610c7f57610c11600183611308565b9150610c1e600a8661131f565b610c29906030611333565b60f81b818381518110610c3e57610c3e61134b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610c78600a866112f4565b9450610c00565b949350505050565b828054610c93906111c8565b90600052602060002090601f016020900481019282610cb55760008555610cfb565b82601f10610cce57805160ff1916838001178555610cfb565b82800160010185558215610cfb579182015b82811115610cfb578251825591602001919060010190610ce0565b50610d07929150610d0b565b5090565b5b80821115610d075760008155600101610d0c565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a0857600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610dba57610dba610d44565b604052919050565b600067ffffffffffffffff821115610ddc57610ddc610d44565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000610e1b610e1684610dc2565b610d73565b9050828152838383011115610e2f57600080fd5b828260208301376000602084830101529392505050565b600082601f830112610e5757600080fd5b610e6683833560208501610e08565b9392505050565b600080600080600060a08688031215610e8557600080fd5b610e8e86610d20565b9450602086013567ffffffffffffffff80821115610eab57600080fd5b610eb789838a01610e46565b95506040880135915080821115610ecd57600080fd5b610ed989838a01610e46565b94506060880135915080821115610eef57600080fd5b50610efc88828901610e46565b95989497509295608001359392505050565b600060208284031215610f2057600080fd5b813567ffffffffffffffff811115610f3757600080fd5b8201601f81018413610f4857600080fd5b610c7f84823560208401610e08565b600060208284031215610f6957600080fd5b610e6682610d20565b60005b83811015610f8d578181015183820152602001610f75565b838111156105d95750506000910152565b60008151808452610fb6816020860160208601610f72565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b608081526000610ffb6080830187610f9e565b828103602084015261100d8187610f9e565b905082810360408401526110218186610f9e565b91505082606083015295945050505050565b60008060006060848603121561104857600080fd5b61105184610d20565b9250602084013567ffffffffffffffff8082111561106e57600080fd5b61107a87838801610e46565b9350604086013591508082111561109057600080fd5b5061109d86828701610e46565b9150509250925092565b6000602082840312156110b957600080fd5b5035919050565b602081526000610e666020830184610f9e565b600080604083850312156110e657600080fd5b6110ef83610d20565b946020939093013593505050565b60006020828403121561110f57600080fd5b81518015158114610e6657600080fd5b600082601f83011261113057600080fd5b815161113e610e1682610dc2565b81815284602083860101111561115357600080fd5b610c7f826020830160208701610f72565b6000806040838503121561117757600080fd5b825167ffffffffffffffff8082111561118f57600080fd5b61119b8683870161111f565b935060208501519150808211156111b157600080fd5b506111be8582860161111f565b9150509250929050565b600181811c908216806111dc57607f821691505b602082108103611215577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000845161122d818460208901610f72565b845190830190611241818360208901610f72565b8451910190611254818360208801610f72565b0195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036112be576112be61125e565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611303576113036112c5565b500490565b60008282101561131a5761131a61125e565b500390565b60008261132e5761132e6112c5565b500690565b600082198211156113465761134661125e565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea164736f6c634300080d000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "contractURI()": {
        "details": "reverts if a contract uri is not provided",
        "returns": {
          "_0": "contract uri for the contract metadata"
        }
      },
      "init(bytes)": {
        "details": "This function is called by the deployer/factory when creating a contractA blank init function is required to be able to call genesisDeriveFutureAddress to get the deterministic addressSince no data is required to be intialized the selector is just returned and _setInitialized() does not need to be called"
      },
      "initializeWithData(bytes)": {
        "params": {
          "data": "passed in for initialization"
        }
      },
      "tokenURI(uint256)": {
        "details": "reverts if a contract uri is not set",
        "returns": {
          "_0": "token URI for the given token ID and contract (set by msg.sender)"
        }
      },
      "updateMetadataBase(address,string,string)": {
        "params": {
          "baseUri": "new base URI",
          "newContractUri": "new contract URI (can be an empty string)"
        }
      },
      "updateMetadataBaseWithDetails(address,string,string,string,uint256)": {
        "params": {
          "freezeAt": "time to freeze the contract metadata at (set to 0 to disable)",
          "metadataBase": "new base URI to update metadata with",
          "metadataExtension": "new extension to append to base metadata URI",
          "target": "target contract to update metadata for"
        }
      },
      "updateProvenanceHash(address,bytes32)": {
        "params": {
          "provenanceHash": "provenance hash to set",
          "target": "target address to update"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "MetadataUpdated(address,string,string,string,uint256)": {
        "notice": "Event to mark updated metadata information"
      },
      "ProvenanceHashUpdated(address,bytes32)": {
        "notice": "Hash to mark updated provenance hash"
      }
    },
    "kind": "user",
    "methods": {
      "contractURI()": {
        "notice": "A contract URI for the given drop contract"
      },
      "init(bytes)": {
        "notice": "Used internally to initialize the contract instead of through a constructor"
      },
      "initializeWithData(bytes)": {
        "notice": "Standard init for drop metadata from root drop contract"
      },
      "metadataBaseByContract(address)": {
        "notice": "NFT metadata by contract"
      },
      "provenanceHashes(address)": {
        "notice": "Optional provenance hashes for NFT metadata by contract"
      },
      "tokenURI(uint256)": {
        "notice": "A token URI for the given drops contract"
      },
      "updateMetadataBase(address,string,string)": {
        "notice": "Update metadata base URI and contract URI"
      },
      "updateMetadataBaseWithDetails(address,string,string,string,uint256)": {
        "notice": "Update metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing details"
      },
      "updateProvenanceHash(address,bytes32)": {
        "notice": "Update the provenance hash (optional) for a given nft"
      }
    },
    "notice": "Drops metadata system",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8540,
        "contract": "contracts/drops/metadata/DropsMetadataRenderer.sol:DropsMetadataRenderer",
        "label": "metadataBaseByContract",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(MetadataURIInfo)8534_storage)"
      },
      {
        "astId": 8545,
        "contract": "contracts/drops/metadata/DropsMetadataRenderer.sol:DropsMetadataRenderer",
        "label": "provenanceHashes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_struct(MetadataURIInfo)8534_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DropsMetadataRenderer.MetadataURIInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MetadataURIInfo)8534_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MetadataURIInfo)8534_storage": {
        "encoding": "inplace",
        "label": "struct DropsMetadataRenderer.MetadataURIInfo",
        "members": [
          {
            "astId": 8527,
            "contract": "contracts/drops/metadata/DropsMetadataRenderer.sol:DropsMetadataRenderer",
            "label": "base",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 8529,
            "contract": "contracts/drops/metadata/DropsMetadataRenderer.sol:DropsMetadataRenderer",
            "label": "extension",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 8531,
            "contract": "contracts/drops/metadata/DropsMetadataRenderer.sol:DropsMetadataRenderer",
            "label": "contractURI",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 8533,
            "contract": "contracts/drops/metadata/DropsMetadataRenderer.sol:DropsMetadataRenderer",
            "label": "freezeAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
